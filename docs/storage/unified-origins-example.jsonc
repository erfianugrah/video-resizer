{
  "vars": {
    "ENVIRONMENT": "development",
    
    // Define all origins in one central place
    "STORAGE_CONFIG": {
      "origins": {
        "r2Storage": {
          "type": "r2",
          "bucketBinding": "VIDEOS_BUCKET",
          "pathTransforms": {
            "videos": {
              "removePrefix": true,
              "prefix": ""
            },
            "shorts": {
              "removePrefix": true,
              "prefix": "shorts/"
            }
          }
        },
        "primaryCDN": {
          "type": "remote",
          "url": "https://videos.example.com",
          "auth": {
            "enabled": true,
            "type": "aws-s3",
            "accessKeyVar": "PRIMARY_AWS_ACCESS_KEY_ID",
            "secretKeyVar": "PRIMARY_AWS_SECRET_ACCESS_KEY",
            "region": "us-east-1",
            "service": "s3"
          },
          "pathTransforms": {
            "videos": {
              "removePrefix": true,
              "prefix": "videos/"
            }
          },
          "fetchOptions": {
            "userAgent": "Cloudflare-Video-Resizer/1.0"
          }
        },
        "backupCDN": {
          "type": "remote",
          "url": "https://backup.example.com",
          "auth": {
            "enabled": false
          },
          "fetchOptions": {
            "userAgent": "Cloudflare-Video-Resizer/1.0",
            "headers": {
              "X-Custom-Header": "BackupSource"
            }
          }
        }
      },
      
      // Legacy configuration (will be removed in future)
      "priority": ["r2", "remote", "fallback"],
      "r2": {
        "enabled": true,
        "bucketBinding": "VIDEOS_BUCKET"
      },
      "remoteUrl": "https://videos.example.com",
      "remoteAuth": {
        "enabled": true
      },
      "fallbackUrl": "https://backup.example.com"
    },
    
    // Define path patterns that reference origins
    "PATH_PATTERNS": [
      {
        "name": "videos",
        "matcher": "^/videos/",
        "processPath": true,
        // List origins in priority order
        "origins": ["r2Storage", "primaryCDN", "backupCDN"],
        "ttl": {
          "ok": 3600,
          "redirects": 360,
          "clientError": 60,
          "serverError": 10
        },
        "quality": "high"
      },
      {
        "name": "shorts",
        "matcher": "^/shorts/(.*\\.mp4)",
        "processPath": true,
        // Different origin priority for shorts
        "origins": ["r2Storage", "backupCDN"],
        "ttl": {
          "ok": 43200,
          "redirects": 3600,
          "clientError": 60,
          "serverError": 10
        },
        "quality": "medium"
      },
      {
        "name": "premium",
        "matcher": "^/premium/(.*\\.mp4)",
        "processPath": true,
        // Only use primary CDN for premium content
        "origins": ["primaryCDN"],
        "ttl": {
          "ok": 7200,
          "redirects": 360,
          "clientError": 60,
          "serverError": 10
        },
        "quality": "high"
      },
      
      // Backward compatibility example with legacy originUrl
      {
        "name": "legacy",
        "matcher": "^/legacy/(.*\\.mp4)",
        "processPath": true,
        "baseUrl": null,
        "originUrl": "https://legacy.example.com",
        "ttl": {
          "ok": 7200,
          "redirects": 3600,
          "clientError": 60,
          "serverError": 10
        }
      }
    ]
  }
}